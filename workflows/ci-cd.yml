name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  SAM_TEMPLATE: template.yaml

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov boto3 moto
        pip install -r requirements.txt
    
    - name: Run unit tests with coverage
      run: |
        python -m pytest tests/ --cov=chatbot --cov-report=xml --cov-report=html --cov-fail-under=80
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
    
    - name: Run security scan
      run: |
        pip install bandit safety
        bandit -r chatbot/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest boto3 moto locust
        pip install -r requirements.txt
    
    - name: Run performance benchmarks
      run: |
        python benchmark.py --output benchmark-results.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 pylint mypy
    
    - name: Check code formatting with Black
      run: black --check --diff chatbot/
    
    - name: Run Flake8 linting
      run: flake8 chatbot/ --max-line-length=100 --statistics
    
    - name: Run Pylint analysis
      run: pylint chatbot/ --output-format=json > pylint-report.json || true
    
    - name: Run MyPy type checking
      run: mypy chatbot/ --ignore-missing-imports --json-report mypy-report || true
    
    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: |
          pylint-report.json
          mypy-report/

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, performance-test, code-quality]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: SAM build
      run: sam build
    
    - name: Deploy to staging
      run: |
        sam deploy \
          --stack-name serverless-chat-staging \
          --s3-bucket ${{ secrets.SAM_S3_BUCKET }} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --parameter-overrides Environment=staging
    
    - name: Run integration tests
      run: |
        python integration_tests.py --endpoint ${{ steps.deploy.outputs.api-endpoint }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, performance-test, code-quality]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: SAM build
      run: sam build
    
    - name: Deploy to production
      run: |
        sam deploy \
          --stack-name serverless-chat-production \
          --s3-bucket ${{ secrets.SAM_S3_BUCKET }} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --parameter-overrides Environment=production
    
    - name: Run smoke tests
      run: |
        python smoke_tests.py --endpoint ${{ steps.deploy.outputs.api-endpoint }}
    
    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: "Production deployment completed with status: ${{ job.status }}"